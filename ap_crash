#!/usr/bin/env python3

"""
File: ap_crash
Author: Jeff Hagley - jhagley@piergroup.com
Date: 2024-03-18
Description: This code will look for AP crash files on the local file system and login to the appropriate controller to give further information on the crash
"""

import os
from datetime import datetime, timedelta
import concurrent.futures
from aruba_query import *
from constants import *

# we disable the warnings if we are using IP addresses to connect to the ArubaOS Infrastructure
requests.packages.urllib3.disable_warnings()


def main():
    query = ArubaQuery()
    inventory = ArubaInventory()
    aps_with_crashes = {}
    aps_with_process_crashes = {}
    today = datetime.now()
    yesterday = today - timedelta(hours=AP_CRASH_CHECK_TIME)
    known_crashes = {}
    aruba_md = {}

    files = os.listdir(PATH_TO_AP_CRASH_FILES)

    # get crash signatures from Aruba file if file exists, or fall back to manual crash db from 2023-10-16
    if (
        os.path.isfile(
            f"{PATH_TO_AP_CRASH_FILES}/AP-crash-signature/AP-crash-signature-list.txt"
        )
        and os.path.getsize(
            f"{PATH_TO_AP_CRASH_FILES}/AP-crash-signature/AP-crash-signature-list.txt"
        )
        > 0
    ):
        with open(
            f"{PATH_TO_AP_CRASH_FILES}/AP-crash-signature/AP-crash-signature-list.txt",
            "r",
        ) as crash_signature_file:
            crash_signatures = crash_signature_file.readlines()
            for line in crash_signatures:
                known_crashes[line.split(";")[0][1:-1]] = line.split(";")[1].replace(
                    "\n", ""
                )[1:-1]
    else:
        known_crashes = KNOWN_CRASHES_BACKUP

    # check the crash logs that have shown up on the server
    for file in files:
        if file.startswith("panic-dump"):
            ap_name = file.split(".")[1]
            year = file.split(".")[2].split("-")[0]
            month = file.split(".")[2].split("-")[1]
            day = file.split(".")[2].split("-")[2].split("_")[0]
            hour = file.split(".")[2].split("-")[2].split("_")[1]
            minute = file.split(".")[2].split("-")[3]
            second = file.split(".")[2].split("-")[4]
            crash_date = datetime(
                int(year), int(month), int(day), int(hour), int(minute), int(second)
            )
            # we only care about aps that crashed today or yesterday
            if (
                crash_date.date() == today.date()
                or crash_date.date() == yesterday.date()
            ):
                aps_with_crashes.setdefault(ap_name, {})
                aps_with_crashes[file] = {
                    "version": "",
                    "date": crash_date,
                    "controller": "",
                    "crash_file": file,
                    "ap_name": ap_name,
                }
        elif file.startswith("core."):
            ap_name = file.split(".")[2]
            process = file.split(".")[1]
            epoch_time = os.path.getmtime(f"{PATH_TO_AP_CRASH_FILES}/{file}")
            datetime_file = datetime.fromtimestamp(epoch_time)
            year = datetime_file.year
            month = datetime_file.month
            day = datetime_file.day
            hour = datetime_file.hour
            minute = datetime_file.minute
            second = datetime_file.second
            crash_date = datetime(
                int(year), int(month), int(day), int(hour), int(minute), int(second)
            )
            if (
                crash_date.date() == today.date()
                or crash_date.date() == yesterday.date()
            ):
                aps_with_process_crashes.setdefault(ap_name, {})
                aps_with_process_crashes[file] = {
                    "version": "",
                    "date": crash_date,
                    "controller": "",
                    "process": process,
                    "crash_file": file,
                    "ap_name": ap_name,
                }

    # login conductors to get list of controllers
    if len(aps_with_crashes) > 0:
        with concurrent.futures.ThreadPoolExecutor() as executor:
            for mm in ARUBA_MM:
                executor.submit(query.get_aruba_api_token, mm, PASSWORD, inventory)

        # get the list of infrastructure from the primary conductor, and then get API tokens for the gear
        for mm in ARUBA_MM:
            response = query.aruba_show_command(mm, "show+switches+debug", inventory)
            for switch in response["All Switches"]:
                if switch["Type"] == "MD":
                    query.get_aruba_api_token(switch["IP Address"], PASSWORD, inventory)
                    aruba_md.setdefault(switch["IP Address"], switch["Version"])

        # get the current Aruba AP DB to see what controller APs are on
        with concurrent.futures.ThreadPoolExecutor() as executor:
            for md in aruba_md:
                executor.submit(query.get_aruba_db, md, inventory)

        # for each ap with a crash, login to it's primary switch and get more information
        for ap in aps_with_crashes:
            if ap["ap_name"] in inventory.aps.keys():
                found = False
                # we look at the crash file instead of via API because there is inconsistent output format from the API depending on AP model
                with open(f"{PATH_TO_AP_CRASH_FILES}/{aps_with_crashes[ap]['crash_file']}","r") as ap_crash_file:
                    ap_crash_info = ap_crash_file.readlines()
                    
                    ap_reboot_reason = query.aruba_show_ap_crash_info_reboot_reason(
                        inventory.aps[ap].primary, PASSWORD, ap
                    )
                    for line in ap_crash_info:
                        # if the signature is in the known crash dictionary tell us
                        for signature in known_crashes.keys():
                            if signature in line:
                                print(
                                    f"""AP name: {ap["ap_name"]}   AP type: {inventory.aps[ap["ap_name"]].model}   AP SN#: {inventory.aps[ap["ap_name"]].serial}   AOS Version: {aruba_md[inventory.aps[ap["ap_name"]].primary]}
    AP AAC IP: {inventory.aps[ap["ap_name"]].primary}   AP Crash Time: {aps_with_crashes[ap]['date']}
    AP core-dump filename: {aps_with_crashes[ap]['crash_file']}   AP Reboot Information: {ap_reboot_reason.replace("AP Reboot reason: ", "")}
    This is a known crash. {signature} - {known_crashes[signature]}\n"""
                                )
                                found = True
                    # if the signature is not in the known crash dictionary tell us
                    if not found:
                        print(
                            f"""AP name: {ap["ap_name"]}   AP type: {inventory.aps[ap["ap_name"]].model}   AP SN#: {inventory.aps[ap["ap_name"]].serial}   AOS Version: {aruba_md[inventory.aps[ap["ap_name"]].primary]}
    AP AAC IP: {inventory.aps[ap["ap_name"]].primary}   AP Crash Time: {aps_with_crashes[ap]['date']}
    AP core-dump filename: {aps_with_crashes[ap]['crash_file']}   AP Reboot Information: {ap_reboot_reason.replace("AP Reboot reason: ", "")}
    This is a new crash. Please report to Aruba TAC.\n"""
                        )
        for ap in aps_with_process_crashes:
            if ap in inventory.aps.keys():
                ap_reboot_reason = query.aruba_show_ap_crash_info_reboot_reason(
                    inventory.aps[ap["ap_name"]].primary, PASSWORD, ap
                )

                print(
                    f"""AP name: {ap["ap_name"]}   AP type: {inventory.aps[ap["ap_name"]].model}   AP SN#: {inventory.aps[ap["ap_name"]].serial}   AOS Version: {aruba_md[inventory.aps[ap["ap_name"]].primary]}
    AP AAC IP: {inventory.aps[ap["ap_name"]].primary}   AP Crashed Process: {aps_with_process_crashes[ap]['process']}   AP Process Crash Time: {aps_with_process_crashes[ap]['date']}
    AP core-dump filename: {aps_with_process_crashes[ap]['crash_file']}   AP Reboot Information: {ap_reboot_reason.replace("AP Reboot reason: ", "")}
    Please report to Aruba TAC.\n"""
                )


if __name__ == "__main__":
    main()


